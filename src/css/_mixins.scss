
@mixin zap-global-box-sizing {
    *,
    *:before,
    *:after {
        @if $zap-autoprefixer-enabled {
            box-sizing: border-box;
        } @else {
            @include box-sizing(border-box);
        }
    }
}

@mixin zap-rem($property, $values, $base: $zap-font-size-html) {
    $px: ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto {
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value);
            $val: zap-parse-int($value);

            @if $unit == 'px' {
                $px: append($px, round($val) + px);
                $rem: append($rem, ($val / zap-strip-units($base) + rem));
            } @else if $unit == 'rem' {
                $px: append($px, (round($val * zap-strip-units($base)) + px));
                $rem: append($rem, $value);
            } @else {
                $px: append($px, (round($val) + px));
                $rem: append($rem, ($val / zap-strip-units($base) + rem));
            }
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
        @if $zap-rem-fallback == true or $zap-rem-support == false {
            #{$property}: $px;
        }
        @if $zap-rem-support == true {
            #{$property}: $rem;
        }
    }
}

@mixin zap-clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin zap-center-element($x: true, $y: true, $scale: false) {
    $scale-value: 1;
    @if zap-is-number($scale) {
        $scale-value: $scale;
    }

    position: absolute;
    @if $x and $y {
        top: 50%;
        left: 50%;
        @if $scale {
            @if $zap-autoprefixer-enabled {
                transform: translateX(-50%) translateY(-50%) scale($scale-value);
            } @else {
                @include transform(translateX(-50%) translateY(-50%) scale($scale-value));
            }
        } @else {
            @if $zap-autoprefixer-enabled {
                transform: translateX(-50%) translateY(-50%);
            } @else {
                @include transform(translateX(-50%) translateY(-50%));
            }
        }
    } @else {
        @if $x {
            top: 0;
            left: 50%;
            @if $scale {
                @if $zap-autoprefixer-enabled {
                    transform: translateX(-50%) scale($scale-value);
                } @else {
                    @include transform(translateX(-50%) scale($scale-value));
                }
            } @else {
                @if $zap-autoprefixer-enabled {
                    transform: translateX(-50%);
                } @else {
                    @include translateX(-50%);
                }
            }
        }
        @if $y {
            top: 50%;
            left: 0;
            @if $scale {
                @if $zap-autoprefixer-enabled {
                    transform: translateY(-50%) scale($scale-value);
                } @else {
                    @include transform(translateY(-50%) scale($scale-value));
                }
            } @else {
                @if $zap-autoprefixer-enabled {
                    transform: translateY(-50%);
                } @else {
                    @include translateY(-50%);
                }
            }
        }
    }
}

@mixin zap-hide-text {
    text-indent: 110%;
    white-space: nowrap;
    overflow: hidden;
}

@mixin zap-hide-element {
    position: absolute;
    margin: -1px;
    border: 0;
    padding: 0;
    width: 1px;
    height: 1px;
    clip: rect(0 0 0 0);
    overflow: hidden;
}

@mixin zap-reset-list($margin: 0, $padding: 0) {
    @include zap-rem(margin, $margin);
    @include zap-rem(padding, $padding);
    list-style: none;
}

@mixin zap-list-reset($margin: 0, $padding: 0) {
    @include zap-reset-list($margin, $padding);
}

// just use $class-list: '' if you want to achieve &,&:focus,&:hover for example
@mixin zap-hover($focus: true, $active: false, $class-list: null) {
    $selector: ();

    // TODO: multiple ..
    @if ($class-list != null) {
        $class-list: unquote('&#{$class-list}');
        $selector: append($selector, unquote($class-list), comma);
    }

    @if ($active) {
        $selector: append($selector, unquote('&:active'), comma);
    }

    @if ($focus) {
        $selector: append($selector, unquote('&:focus'), comma);
    }

    $selector: append($selector, unquote('&:hover'), comma);

    #{$selector} {
        @content;
    }
}

@mixin zap-aspect-ratio($width, $height, $with-pseudo-element: true, $position: relative) {
    @if ($position != null) {
        position: $position;
    }
    overflow: hidden;

    @if $with-pseudo-element {
        &:before {
            content: '';
            display: block;
            width: 100%;
            padding-top: ($height / $width) * 100%;
            @content;
        }
    } @else {
        padding-top: ($height / $width) * 100%;
        @content;
    }
}

@mixin zap-triangle($direction: top, $color: $zap-arrow-color, $size: $zap-arrow-size) {
    border: $size solid transparent;
    @include zap-triangle-color($direction, $color);
}

@mixin zap-triangle-color($direction: top, $color: $zap-arrow-color) {
    border-color: transparent;
    @if (unquote($direction) == top) {
        border-bottom-color: $color;
    } @else if (unquote($direction) == right) {
        border-left-color: $color;
    } @else if (unquote($direction) == bottom) {
        border-top-color: $color;
    } @else if (unquote($direction) == left) {
        border-right-color: $color;
    }
}

@mixin zap-triangle-size($size: $zap-arrow-size) {
    border-width: $size;
}

@mixin zap-if-ltr {
    @if ($zap-direction == 'ltr') {
        @content;
    }
}

@mixin zap-if-rtl {
    @if ($zap-direction == 'rtl') {
        @content;
    }
}
